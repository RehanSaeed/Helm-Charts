# Documentation: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ include "ummati.fullname" . }}-home"
  labels:
    app.kubernetes.io/name: "{{ include "ummati.fullname" . }}-home"
    app.kubernetes.io/component: "website"
    {{- include "ummati.defaultLabels" . | nindent 4 }}
  annotations:
    {{- include "ummati.defaultAnnotations" . | nindent 4 }}
spec:
  replicas: {{ .Values.home.replicas.minimum }}
  selector:
    matchLabels:
      app.kubernetes.io/name: "{{ include "ummati.fullname" . }}-home"
  strategy:
    rollingUpdate:
      maxSurge: {{ .Values.home.rollingUpdate.maxSurge }}
      maxUnavailable: {{ .Values.home.rollingUpdate.maxUnavailable }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: "{{ include "ummati.fullname" . }}-home"
    spec:
      containers:
        - name: "{{ include "ummati.fullname" . }}-home"
          {{- if hasKey .Values.home.image "registry" }}
          image: "{{ .Values.home.image.registry }}/{{ .Values.home.image.repository }}:{{ .Values.home.image.tag }}"
          {{- else }}
          image: "{{ .Values.home.image.repository }}:{{ .Values.home.image.tag }}"
          {{- end }}
          imagePullPolicy: {{ .Values.home.image.pullPolicy | quote }}
          ports:
            - name: "http"
              containerPort: 80
              protocol: "TCP"
            - name: "https"
              containerPort: 443
              protocol: "TCP"
          livenessProbe:
            httpGet:
              scheme: "HTTP"
              path: /
              port: "http"
            initialDelaySeconds: {{ .Values.home.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.home.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.home.livenessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.home.livenessProbe.successThreshold }}
            failureThreshold: {{ .Values.home.livenessProbe.failureThreshold }}
          readinessProbe:
            httpGet:
              scheme: "HTTP"
              path: /
              port: "http"
            initialDelaySeconds: {{ .Values.home.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.home.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.home.readinessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.home.livenessProbe.successThreshold }}
            failureThreshold: {{ .Values.home.readinessProbe.failureThreshold }}
          resources:
{{ toYaml .Values.home.resources | indent 12 }}
          securityContext:
            allowPrivilegeEscalation: {{ .Values.home.securityContext.allowPrivilegeEscalation }}
            readOnlyRootFilesystem: {{ .Values.home.securityContext.readOnlyRootFilesystem }}
            runAsUser: {{ .Values.home.securityContext.runAsUser }}
      priorityClassName: {{ .Values.home.priorityClassName | quote }}